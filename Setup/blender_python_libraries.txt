import sys
import subprocess
from pathlib import Path
from typing import List, Tuple


def get_log_file_path() -> Path:
    return Path.home() / "blender_pip_install_log.txt"


def delete_log_file(log_file: Path) -> None:
    if log_file.exists():
        log_file.unlink()


def log_to_file(log_file: Path, message: str) -> None:
    with log_file.open("a") as file:
        file.write(message + "\n")


def ensure_pip_installed() -> subprocess.CompletedProcess:
    result = subprocess.run([sys.executable, "-m", "ensurepip"], capture_output = True, text = True)
    return result


def install_packages(packages: List[str]) -> subprocess.CompletedProcess:
    result = subprocess.run([sys.executable, "-m", "pip", "install"] + packages, capture_output = True, text = True)
    return result


def summarize_installation(packages: List[str], install_output: subprocess.CompletedProcess) -> Tuple[List[str], List[str]]:
    installed_successfully = []
    installed_unsuccessfully = []
    
    for package in packages:
        if package in install_output.stdout:
            installed_successfully.append(package)
        else:
            installed_unsuccessfully.append(package)
            
    return installed_successfully, installed_unsuccessfully


def main() -> None:    
    log_file = get_log_file_path()
    delete_log_file(log_file)

    packages = ["numpy", "psutil", "debugpy", "colorama", "pyautogui", "matplotlib"]

    # Ensure pip is installed
    ensure_pip = ensure_pip_installed()
    log_to_file(log_file, "Ensure pip output:\n" + ensure_pip.stdout + "\n" + ensure_pip.stderr)

    # Install packages
    install_packages_result = install_packages(packages)
    log_to_file(log_file, "Install Packages output:\n" + install_packages_result.stdout + "\n" + install_packages_result.stderr)

    # Prepare log
    installed_successfully, installed_unsuccessfully = summarize_installation(packages, install_packages_result)

    # Log installation summary
    if installed_successfully:
        log_to_file(log_file, "INSTALLED SUCCESSFULLY:\n" + "\n".join(installed_successfully))
    if installed_unsuccessfully:
        log_to_file(log_file, "INSTALLED UNSUCCESSFULLY:\n" + "\n".join(installed_unsuccessfully))

    # Open the log file with Notepad
    subprocess.run(["notepad.exe", str(log_file)], check=True)


# Call the Main Function
main()
